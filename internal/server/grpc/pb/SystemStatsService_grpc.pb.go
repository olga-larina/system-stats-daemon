// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.25.3
// source: SystemStatsService.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SystemStatsService_ObserveSystemStats_FullMethodName = "/stats.SystemStatsService/ObserveSystemStats"
)

// SystemStatsServiceClient is the client API for SystemStatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemStatsServiceClient interface {
	ObserveSystemStats(ctx context.Context, in *SystemStatsRequest, opts ...grpc.CallOption) (SystemStatsService_ObserveSystemStatsClient, error)
}

type systemStatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemStatsServiceClient(cc grpc.ClientConnInterface) SystemStatsServiceClient {
	return &systemStatsServiceClient{cc}
}

func (c *systemStatsServiceClient) ObserveSystemStats(ctx context.Context, in *SystemStatsRequest, opts ...grpc.CallOption) (SystemStatsService_ObserveSystemStatsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SystemStatsService_ServiceDesc.Streams[0], SystemStatsService_ObserveSystemStats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &systemStatsServiceObserveSystemStatsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SystemStatsService_ObserveSystemStatsClient interface {
	Recv() (*SystemStatsPb, error)
	grpc.ClientStream
}

type systemStatsServiceObserveSystemStatsClient struct {
	grpc.ClientStream
}

func (x *systemStatsServiceObserveSystemStatsClient) Recv() (*SystemStatsPb, error) {
	m := new(SystemStatsPb)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SystemStatsServiceServer is the server API for SystemStatsService service.
// All implementations must embed UnimplementedSystemStatsServiceServer
// for forward compatibility
type SystemStatsServiceServer interface {
	ObserveSystemStats(*SystemStatsRequest, SystemStatsService_ObserveSystemStatsServer) error
	mustEmbedUnimplementedSystemStatsServiceServer()
}

// UnimplementedSystemStatsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemStatsServiceServer struct {
}

func (UnimplementedSystemStatsServiceServer) ObserveSystemStats(*SystemStatsRequest, SystemStatsService_ObserveSystemStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveSystemStats not implemented")
}
func (UnimplementedSystemStatsServiceServer) mustEmbedUnimplementedSystemStatsServiceServer() {}

// UnsafeSystemStatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemStatsServiceServer will
// result in compilation errors.
type UnsafeSystemStatsServiceServer interface {
	mustEmbedUnimplementedSystemStatsServiceServer()
}

func RegisterSystemStatsServiceServer(s grpc.ServiceRegistrar, srv SystemStatsServiceServer) {
	s.RegisterService(&SystemStatsService_ServiceDesc, srv)
}

func _SystemStatsService_ObserveSystemStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SystemStatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemStatsServiceServer).ObserveSystemStats(m, &systemStatsServiceObserveSystemStatsServer{ServerStream: stream})
}

type SystemStatsService_ObserveSystemStatsServer interface {
	Send(*SystemStatsPb) error
	grpc.ServerStream
}

type systemStatsServiceObserveSystemStatsServer struct {
	grpc.ServerStream
}

func (x *systemStatsServiceObserveSystemStatsServer) Send(m *SystemStatsPb) error {
	return x.ServerStream.SendMsg(m)
}

// SystemStatsService_ServiceDesc is the grpc.ServiceDesc for SystemStatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemStatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats.SystemStatsService",
	HandlerType: (*SystemStatsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveSystemStats",
			Handler:       _SystemStatsService_ObserveSystemStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "SystemStatsService.proto",
}
